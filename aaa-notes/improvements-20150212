(1) Translate special character '&' to the word 'and'  and '%' to the phrase 'percent' in ontology entries (names, codes, paths, values).
(2) Execution of spreadsheet formulae. I thought this might be a nightmare of complexity to do. But on cursory investigation it might just be possible to do in a short time. It will take me about 2 hours to discover (and maybe do it). I think this would be a good thing to have. Many spreadsheets have formulae. If a formula fails, the Uploader would need to throw an exception.
(3) Logging and log4J. We need to investigate why my logging messages are not coming out in JBoss, and fix it. If need be by my code altering the way it logs.
(4) JDBC connection pooling. Saj, I think by good fortune we hit upon using a connection in a rather batch sense. Comes from the core code we started with being derived from your work with Rob. I'd like to keep that aspect of it, but I'm in a quandry about connection re-use in the portal. I don't know how you're managing it. I've been having a serious think, and I believe there is a way forward. Rather than me acquire a static Connection object internally within the Uploader (really poor), have it passed down (non static) from the portal to the I2B2Project's factory object (ie: part of the method signature). So, each I2b2Project instance created by the factory (for the instance lifetime, which is decided by the portal) gets its own connection. If the portal can retrieve these from say a Spring/Hiberate connection pool, then the portal can return it to the pool after the project instance is no longer required.
(5) Performance and transactions. At present each sql command is executed as a standalone transaction. This might be killing performance. Design a transaction object which can commit regularly (say every 100 commands or so, but the actual number could be driven by a configuration setting). We could then experiment. Intricate, but doable in the time. I might need to do this one on yet another branch though.